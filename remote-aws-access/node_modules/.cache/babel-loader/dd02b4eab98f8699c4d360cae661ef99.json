{"ast":null,"code":"import _slicedToArray from \"/Users/nicholaws/Documents/final_year_project/remote-aws-access/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nicholaws/Documents/final_year_project/remote-aws-access/src/components/react-singleton-hook/src/components/SingletonHooksContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { SingleItemContainer } from './SingleItemContainer';\nimport { mount } from '../utils/env';\nimport { warning } from '../utils/warning';\nlet SingletonHooksContainerMounted = false;\nlet SingletonHooksContainerRendered = false;\nlet SingletonHooksContainerMountedAutomatically = false;\nlet mountQueue = [];\n\nconst mountIntoContainerDefault = item => {\n  mountQueue.push(item);\n};\n\nlet mountIntoContainer = mountIntoContainerDefault;\nexport const SingletonHooksContainer = () => {\n  SingletonHooksContainerRendered = true;\n  useEffect(() => {\n    if (SingletonHooksContainerMounted) {\n      warning('SingletonHooksContainer is mounted second time. ' + 'You should mount SingletonHooksContainer before any other component and never unmount it.' + 'Alternatively, dont use SingletonHooksContainer it at all, we will handle that for you.');\n    }\n\n    SingletonHooksContainerMounted = true;\n    return () => process.env.NODE_ENV !== 'test' && warning('SingletonHooksContainer is removed from DOM. its not supported, singleton hooks will stop updating.');\n  }, []);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        hooks = _useState2[0],\n        setHooks = _useState2[1];\n\n  useEffect(() => {\n    mountIntoContainer = item => setHooks(hooks => [...hooks, item]);\n\n    setHooks(mountQueue);\n  }, []);\n  return React.createElement(React.Fragment, null, hooks.map((h, i) => React.createElement(SingleItemContainer, Object.assign({}, h, {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))));\n};\nexport const addHook = hook => {\n  if (!SingletonHooksContainerRendered && !SingletonHooksContainerMountedAutomatically) {\n    SingletonHooksContainerMountedAutomatically = true;\n    mount(SingletonHooksContainer);\n  }\n\n  mountIntoContainer(hook);\n};\nexport const resetLocalStateForTests = () => {\n  SingletonHooksContainerMounted = false;\n  SingletonHooksContainerRendered = false;\n  SingletonHooksContainerMountedAutomatically = false;\n  mountQueue = [];\n  mountIntoContainer = mountIntoContainerDefault;\n};","map":{"version":3,"sources":["/Users/nicholaws/Documents/final_year_project/remote-aws-access/src/components/react-singleton-hook/src/components/SingletonHooksContainer.js"],"names":["React","useState","useEffect","SingleItemContainer","mount","warning","SingletonHooksContainerMounted","SingletonHooksContainerRendered","SingletonHooksContainerMountedAutomatically","mountQueue","mountIntoContainerDefault","item","push","mountIntoContainer","SingletonHooksContainer","process","env","NODE_ENV","hooks","setHooks","map","h","i","addHook","hook","resetLocalStateForTests"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,IAAIC,8BAA8B,GAAG,KAArC;AACA,IAAIC,+BAA+B,GAAG,KAAtC;AACA,IAAIC,2CAA2C,GAAG,KAAlD;AAEA,IAAIC,UAAU,GAAG,EAAjB;;AACA,MAAMC,yBAAyB,GAAIC,IAAD,IAAU;AAAEF,EAAAA,UAAU,CAACG,IAAX,CAAgBD,IAAhB;AAAwB,CAAtE;;AACA,IAAIE,kBAAkB,GAAGH,yBAAzB;AAEA,OAAO,MAAMI,uBAAuB,GAAG,MAAM;AAC3CP,EAAAA,+BAA+B,GAAG,IAAlC;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,8BAAJ,EAAoC;AAClCD,MAAAA,OAAO,CAAC,qDACJ,2FADI,GAEJ,yFAFG,CAAP;AAGD;;AACDC,IAAAA,8BAA8B,GAAG,IAAjC;AACA,WAAO,MAAMS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmCZ,OAAO,CAAC,qGAAD,CAAvD;AACD,GARQ,EAQN,EARM,CAAT;;AAF2C,oBAYjBJ,QAAQ,CAAC,EAAD,CAZS;AAAA;AAAA,QAYpCiB,KAZoC;AAAA,QAY7BC,QAZ6B;;AAc3CjB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,kBAAkB,GAAGF,IAAI,IAAIQ,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWP,IAAX,CAAV,CAArC;;AACAQ,IAAAA,QAAQ,CAACV,UAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO,0CAAGS,KAAK,CAACE,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU,oBAAC,mBAAD,oBAAyBD,CAAzB;AAA4B,IAAA,GAAG,EAAEC,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB,CAAH,CAAP;AACD,CApBM;AAuBP,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAI;AAC7B,MAAI,CAACjB,+BAAD,IAAoC,CAACC,2CAAzC,EAAsF;AACpFA,IAAAA,2CAA2C,GAAG,IAA9C;AACAJ,IAAAA,KAAK,CAACU,uBAAD,CAAL;AACD;;AAEDD,EAAAA,kBAAkB,CAACW,IAAD,CAAlB;AACD,CAPM;AASP,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AAC3CnB,EAAAA,8BAA8B,GAAG,KAAjC;AACAC,EAAAA,+BAA+B,GAAG,KAAlC;AACAC,EAAAA,2CAA2C,GAAG,KAA9C;AACAC,EAAAA,UAAU,GAAG,EAAb;AACAI,EAAAA,kBAAkB,GAAGH,yBAArB;AACD,CANM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { SingleItemContainer } from './SingleItemContainer';\nimport { mount } from '../utils/env';\nimport { warning } from '../utils/warning';\n\nlet SingletonHooksContainerMounted = false;\nlet SingletonHooksContainerRendered = false;\nlet SingletonHooksContainerMountedAutomatically = false;\n\nlet mountQueue = [];\nconst mountIntoContainerDefault = (item) => { mountQueue.push(item); };\nlet mountIntoContainer = mountIntoContainerDefault;\n\nexport const SingletonHooksContainer = () => {\n  SingletonHooksContainerRendered = true;\n  useEffect(() => {\n    if (SingletonHooksContainerMounted) {\n      warning('SingletonHooksContainer is mounted second time. '\n        + 'You should mount SingletonHooksContainer before any other component and never unmount it.'\n        + 'Alternatively, dont use SingletonHooksContainer it at all, we will handle that for you.');\n    }\n    SingletonHooksContainerMounted = true;\n    return () => process.env.NODE_ENV !== 'test' && warning('SingletonHooksContainer is removed from DOM. its not supported, singleton hooks will stop updating.');\n  }, []);\n\n  const [hooks, setHooks] = useState([]);\n\n  useEffect(() => {\n    mountIntoContainer = item => setHooks(hooks => [...hooks, item]);\n    setHooks(mountQueue);\n  }, []);\n\n  return <>{hooks.map((h, i) => <SingleItemContainer {...h} key={i}/>)}</>;\n};\n\n\nexport const addHook = hook => {\n  if (!SingletonHooksContainerRendered && !SingletonHooksContainerMountedAutomatically) {\n    SingletonHooksContainerMountedAutomatically = true;\n    mount(SingletonHooksContainer);\n  }\n\n  mountIntoContainer(hook);\n};\n\nexport const resetLocalStateForTests = () => {\n  SingletonHooksContainerMounted = false;\n  SingletonHooksContainerRendered = false;\n  SingletonHooksContainerMountedAutomatically = false;\n  mountQueue = [];\n  mountIntoContainer = mountIntoContainerDefault;\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}