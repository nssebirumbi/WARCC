{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar socket_io_1 = require(\"./socket-io\");\n\nvar constants_1 = require(\"./constants\");\n\nvar add_subscriber_1 = require(\"./add-subscriber\");\n\nexports.attachListeners = function (webSocketInstance, url, setters, options, reconnect, reconnectCount, expectClose) {\n  var setLastMessage = setters.setLastMessage,\n      setReadyState = setters.setReadyState;\n  var interval;\n  var reconnectTimeout;\n\n  if (options.fromSocketIO) {\n    interval = socket_io_1.setUpSocketIOPing(webSocketInstance);\n  }\n\n  if (options.share) {\n    var removeSubscriber = add_subscriber_1.addSubscriber(webSocketInstance, url, {\n      setLastMessage: setLastMessage,\n      setReadyState: setReadyState\n    }, options);\n    return removeSubscriber;\n  }\n\n  webSocketInstance.onmessage = function (message) {\n    options.onMessage && options.onMessage(message);\n\n    if (typeof options.filter === 'function' && options.filter(message) !== true) {\n      return;\n    }\n\n    if (expectClose.current === false) {\n      setLastMessage(message);\n    }\n  };\n\n  webSocketInstance.onopen = function (event) {\n    options.onOpen && options.onOpen(event);\n    reconnectCount.current = 0;\n\n    if (expectClose.current === false) {\n      setReadyState(function (prev) {\n        var _a;\n\n        return Object.assign({}, prev, (_a = {}, _a[url] = constants_1.READY_STATE_OPEN, _a));\n      });\n    }\n  };\n\n  webSocketInstance.onclose = function (event) {\n    var _a, _b;\n\n    options.onClose && options.onClose(event);\n\n    if (expectClose.current === false) {\n      setReadyState(function (prev) {\n        var _a;\n\n        return Object.assign({}, prev, (_a = {}, _a[url] = constants_1.READY_STATE_CLOSED, _a));\n      });\n    }\n\n    if (options.shouldReconnect && options.shouldReconnect(event)) {\n      var reconnectAttempts = (_a = options.reconnectAttempts, _a !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT);\n\n      if (reconnectCount.current < reconnectAttempts) {\n        if (expectClose.current === false) {\n          reconnectTimeout = setTimeout(function () {\n            reconnectCount.current++;\n            reconnect();\n          }, (_b = options.reconnectInterval, _b !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS));\n        }\n      } else {\n        console.error(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n      }\n    }\n  };\n\n  webSocketInstance.onerror = function (error) {\n    var _a, _b;\n\n    options.onError && options.onError(error);\n\n    if (options.retryOnError) {\n      if (reconnectCount.current < (_a = options.reconnectAttempts, _a !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n        reconnectTimeout = setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, (_b = options.reconnectInterval, _b !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS));\n      }\n    }\n  };\n\n  return function () {\n    setReadyState(function (prev) {\n      var _a;\n\n      return Object.assign({}, prev, (_a = {}, _a[url] = constants_1.READY_STATE_CLOSING, _a));\n    });\n    if (reconnectTimeout) clearTimeout(reconnectTimeout);\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}