{"ast":null,"code":"import _slicedToArray from \"/Users/nicholaws/Documents/final_year_project/WARCC/remote-aws-access/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nimport { singletonHook } from './react-singleton-hook/src/index';\nconst initShouldConnect = true;\nconst initShouldIntroduceSelf = true;\nconst initCurrentMsg = \"connect localhost:10028\"; //const initActiveTask = \"reportMask\"; \n\nconst initActiveTask = \"reportInterval\";\nconst initActiveNode = \"\";\nconst initLogin = {\n  password: \"admin1234\",\n  username: \"admin\"\n};\n\nlet globalShouldConnect = () => {\n  throw new Error('you must useShouldConnect before setting ShouldConnect');\n};\n\nlet globalShouldIntroduceSelf = () => {\n  throw new Error('you must useShouldIntroduceSelf before setting ShouldIntroduceSelf');\n};\n\nlet globalCurrentMsg = () => {\n  throw new Error('you must useCurrentMsg before setting CurrentMsg');\n};\n\nlet globalActiveTask = () => {\n  throw new Error('you must useActiveTask before setting ActiveTask');\n};\n\nlet globalActiveNode = () => {\n  throw new Error('you must useActiveNode before setting ActiveNode');\n};\n\nlet globalLogin = () => {\n  throw new Error('you must useLogin before setting Login');\n}; //--------\n\n\nexport const useShouldConnect = singletonHook(initShouldConnect, () => {\n  const _useState = useState(initShouldConnect),\n        _useState2 = _slicedToArray(_useState, 2),\n        conn = _useState2[0],\n        setCon = _useState2[1];\n\n  globalShouldConnect = setCon;\n  return conn;\n});\nexport const useShouldIntroduceSelf = singletonHook(initShouldIntroduceSelf, () => {\n  const _useState3 = useState(initShouldIntroduceSelf),\n        _useState4 = _slicedToArray(_useState3, 2),\n        intro = _useState4[0],\n        setIntro = _useState4[1];\n\n  globalShouldIntroduceSelf = setIntro;\n  return intro;\n});\nexport const useCurrentMsg = singletonHook(initCurrentMsg, () => {\n  const _useState5 = useState(initCurrentMsg),\n        _useState6 = _slicedToArray(_useState5, 2),\n        msgg = _useState6[0],\n        setMsg = _useState6[1];\n\n  globalCurrentMsg = setMsg;\n  return msgg;\n});\nexport const useActiveTask = singletonHook(initActiveTask, () => {\n  const _useState7 = useState(initActiveTask),\n        _useState8 = _slicedToArray(_useState7, 2),\n        task = _useState8[0],\n        setTask = _useState8[1];\n\n  globalActiveTask = setTask;\n  return task;\n});\nexport const useActiveNode = singletonHook(initActiveNode, () => {\n  const _useState9 = useState(initActiveNode),\n        _useState10 = _slicedToArray(_useState9, 2),\n        node = _useState10[0],\n        setNode = _useState10[1];\n\n  globalActiveNode = setNode;\n  return node;\n});\nexport const useLogin = singletonHook(initLogin, () => {\n  const _useState11 = useState(initLogin),\n        _useState12 = _slicedToArray(_useState11, 2),\n        logn = _useState12[0],\n        setLogn = _useState12[1];\n\n  globalLogin = setLogn;\n  return logn;\n}); //--------\n\nexport const setShouldConnect = cn => globalShouldConnect(cn);\nexport const setShouldIntroduceSelf = self => globalShouldIntroduceSelf(self);\nexport const setCurrentMsg = msg => globalCurrentMsg(msg);\nexport const setActiveTask = task => globalActiveTask(task);\nexport const setActiveNode = node => globalActiveNode(node);\nexport const setLogin = logn => globalLogin(logn); //","map":{"version":3,"sources":["/Users/nicholaws/Documents/final_year_project/WARCC/remote-aws-access/src/components/globalFlags.js"],"names":["useState","singletonHook","initShouldConnect","initShouldIntroduceSelf","initCurrentMsg","initActiveTask","initActiveNode","initLogin","password","username","globalShouldConnect","Error","globalShouldIntroduceSelf","globalCurrentMsg","globalActiveTask","globalActiveNode","globalLogin","useShouldConnect","conn","setCon","useShouldIntroduceSelf","intro","setIntro","useCurrentMsg","msgg","setMsg","useActiveTask","task","setTask","useActiveNode","node","setNode","useLogin","logn","setLogn","setShouldConnect","cn","setShouldIntroduceSelf","self","setCurrentMsg","msg","setActiveTask","setActiveNode","setLogin"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { singletonHook } from './react-singleton-hook/src/index';\n\nconst initShouldConnect = true;  \nconst initShouldIntroduceSelf = true;  \nconst initCurrentMsg = \"connect localhost:10028\";  \n//const initActiveTask = \"reportMask\"; \nconst initActiveTask = \"reportInterval\";\nconst initActiveNode = \"\";\nconst initLogin = {password:\"admin1234\",username:\"admin\"};\n\n\nlet globalShouldConnect = () => { throw new Error('you must useShouldConnect before setting ShouldConnect'); }; \nlet globalShouldIntroduceSelf = () => { throw new Error('you must useShouldIntroduceSelf before setting ShouldIntroduceSelf'); };\nlet globalCurrentMsg = () => { throw new Error('you must useCurrentMsg before setting CurrentMsg'); }; \nlet globalActiveTask = () => { throw new Error('you must useActiveTask before setting ActiveTask'); };\nlet globalActiveNode = () => { throw new Error('you must useActiveNode before setting ActiveNode'); }; \nlet globalLogin = () => { throw new Error('you must useLogin before setting Login'); }; \n\n//--------\nexport const useShouldConnect = singletonHook(initShouldConnect, () => {\n  const [conn, setCon] = useState(initShouldConnect);\n  globalShouldConnect = setCon;\n  return conn;\n});  \nexport const useShouldIntroduceSelf = singletonHook(initShouldIntroduceSelf, () => {\n  const [intro, setIntro] = useState(initShouldIntroduceSelf);\n  globalShouldIntroduceSelf = setIntro;\n  return intro;\n});\nexport const useCurrentMsg = singletonHook(initCurrentMsg, () => {\n  const [msgg, setMsg] = useState(initCurrentMsg);\n  globalCurrentMsg = setMsg;\n  return msgg;\n}); \nexport const useActiveTask = singletonHook(initActiveTask, () => {\n  const [task, setTask] = useState(initActiveTask);\n  globalActiveTask = setTask;\n  return task;\n}); \n\nexport const useActiveNode = singletonHook(initActiveNode, () => {\n  const [node, setNode] = useState(initActiveNode);\n  globalActiveNode = setNode;\n  return node;\n}); \n\nexport const useLogin = singletonHook(initLogin, () => {\n  const [logn, setLogn] = useState(initLogin);\n  globalLogin = setLogn;\n  return logn;\n});\n//--------\n\nexport const setShouldConnect = cn => globalShouldConnect(cn); \nexport const setShouldIntroduceSelf = self => globalShouldIntroduceSelf(self);\nexport const setCurrentMsg = msg => globalCurrentMsg(msg); \nexport const setActiveTask = task => globalActiveTask(task);\nexport const setActiveNode = node => globalActiveNode(node); \nexport const setLogin = logn => globalLogin(logn); \n\n//\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}