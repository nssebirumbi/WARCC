{"ast":null,"code":"import { useLayoutEffect, useRef } from 'react';\nexport const SingleItemContainer = ({\n  initValue,\n  useHookBody,\n  applyStateChange\n}) => {\n  const lastState = useRef(initValue);\n\n  if (typeof useHookBody !== 'function') {\n    throw new Error(\"function expected as hook body parameter. got \".concat(typeof useHookBody));\n  }\n\n  const val = useHookBody(); //useLayoutEffect is safe from SSR perspective because SingleItemContainer should never be rendered on server\n\n  useLayoutEffect(() => {\n    if (lastState.current !== val) {\n      lastState.current = val;\n      applyStateChange(val);\n    }\n  }, [applyStateChange, val]);\n  return null;\n};","map":{"version":3,"sources":["/Users/nicholaws/Documents/final_year_project/WARCC/remote-aws-access/src/components/react-singleton-hook/src/components/SingleItemContainer.js"],"names":["useLayoutEffect","useRef","SingleItemContainer","initValue","useHookBody","applyStateChange","lastState","Error","val","current"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA;AAA1B,CAAD,KAAkD;AACnF,QAAMC,SAAS,GAAGL,MAAM,CAACE,SAAD,CAAxB;;AACA,MAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;AACrC,UAAM,IAAIG,KAAJ,yDAA2D,OAAOH,WAAlE,EAAN;AACD;;AACD,QAAMI,GAAG,GAAGJ,WAAW,EAAvB,CALmF,CAOnF;;AACAJ,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIM,SAAS,CAACG,OAAV,KAAsBD,GAA1B,EAA+B;AAC7BF,MAAAA,SAAS,CAACG,OAAV,GAAoBD,GAApB;AACAH,MAAAA,gBAAgB,CAACG,GAAD,CAAhB;AACD;AACF,GALc,EAKZ,CAACH,gBAAD,EAAmBG,GAAnB,CALY,CAAf;AAOA,SAAO,IAAP;AACD,CAhBM","sourcesContent":["import { useLayoutEffect, useRef } from 'react';\n\nexport const SingleItemContainer = ({ initValue, useHookBody, applyStateChange }) => {\n  const lastState = useRef(initValue);\n  if (typeof useHookBody !== 'function') {\n    throw new Error(`function expected as hook body parameter. got ${typeof useHookBody}`);\n  }\n  const val = useHookBody();\n\n  //useLayoutEffect is safe from SSR perspective because SingleItemContainer should never be rendered on server\n  useLayoutEffect(() => {\n    if (lastState.current !== val) {\n      lastState.current = val;\n      applyStateChange(val);\n    }\n  }, [applyStateChange, val]);\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}