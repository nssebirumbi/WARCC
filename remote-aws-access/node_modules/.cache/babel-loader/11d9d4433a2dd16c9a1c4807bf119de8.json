{"ast":null,"code":"import _slicedToArray from \"/Users/nicholaws/Documents/final_year_project/remote-aws-access/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { addHook } from './components/SingletonHooksContainer';\nimport { batch } from './utils/env';\nexport const singletonHook = (initValue, useHookBody) => {\n  let mounted = false;\n  let lastKnownState = initValue;\n  let consumers = [];\n\n  const applyStateChange = newState => {\n    lastKnownState = newState;\n    batch(() => consumers.forEach(c => c(newState)));\n  };\n\n  return () => {\n    const _useState = useState(lastKnownState),\n          _useState2 = _slicedToArray(_useState, 2),\n          state = _useState2[0],\n          setState = _useState2[1];\n\n    if (!mounted) {\n      mounted = true;\n      addHook({\n        initValue,\n        useHookBody,\n        applyStateChange\n      });\n    }\n\n    useEffect(() => {\n      consumers.push(setState);\n\n      if (lastKnownState !== state) {\n        setState(lastKnownState);\n      }\n\n      return () => {\n        consumers.splice(consumers.indexOf(setState), 1);\n      }; // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return state;\n  };\n};","map":{"version":3,"sources":["/Users/nicholaws/Documents/final_year_project/remote-aws-access/src/components/react-singleton-hook/src/singletonHook.js"],"names":["useEffect","useState","addHook","batch","singletonHook","initValue","useHookBody","mounted","lastKnownState","consumers","applyStateChange","newState","forEach","c","state","setState","push","splice","indexOf"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACvD,MAAIC,OAAO,GAAG,KAAd;AACA,MAAIC,cAAc,GAAGH,SAArB;AACA,MAAII,SAAS,GAAG,EAAhB;;AAEA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrCH,IAAAA,cAAc,GAAGG,QAAjB;AACAR,IAAAA,KAAK,CAAC,MAAMM,SAAS,CAACG,OAAV,CAAkBC,CAAC,IAAIA,CAAC,CAACF,QAAD,CAAxB,CAAP,CAAL;AACD,GAHD;;AAKA,SAAO,MAAM;AAAA,sBACeV,QAAQ,CAACO,cAAD,CADvB;AAAA;AAAA,UACJM,KADI;AAAA,UACGC,QADH;;AAGX,QAAI,CAACR,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAV;AACAL,MAAAA,OAAO,CAAC;AAAEG,QAAAA,SAAF;AAAaC,QAAAA,WAAb;AAA0BI,QAAAA;AAA1B,OAAD,CAAP;AACD;;AAEDV,IAAAA,SAAS,CAAC,MAAM;AACdS,MAAAA,SAAS,CAACO,IAAV,CAAeD,QAAf;;AACA,UAAIP,cAAc,KAAKM,KAAvB,EAA8B;AAC5BC,QAAAA,QAAQ,CAACP,cAAD,CAAR;AACD;;AACD,aAAO,MAAM;AAAEC,QAAAA,SAAS,CAACQ,MAAV,CAAiBR,SAAS,CAACS,OAAV,CAAkBH,QAAlB,CAAjB,EAA8C,CAA9C;AAAmD,OAAlE,CALc,CAOd;AACD,KARQ,EAQN,EARM,CAAT;AAUA,WAAOD,KAAP;AACD,GAnBD;AAoBD,CA9BM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { addHook } from './components/SingletonHooksContainer';\nimport { batch } from './utils/env';\n\nexport const singletonHook = (initValue, useHookBody) => {\n  let mounted = false;\n  let lastKnownState = initValue;\n  let consumers = [];\n\n  const applyStateChange = (newState) => {\n    lastKnownState = newState;\n    batch(() => consumers.forEach(c => c(newState)));\n  };\n\n  return () => {\n    const [state, setState] = useState(lastKnownState);\n\n    if (!mounted) {\n      mounted = true;\n      addHook({ initValue, useHookBody, applyStateChange });\n    }\n\n    useEffect(() => {\n      consumers.push(setState);\n      if (lastKnownState !== state) {\n        setState(lastKnownState);\n      }\n      return () => { consumers.splice(consumers.indexOf(setState), 1); };\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return state;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}